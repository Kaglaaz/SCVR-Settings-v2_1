import importlib, subprocess
def install_pip(modules):
    cmd = ["python", "-m", "pip", "install", "--upgrade", "pip"]
    print(f"Updating pip with {cmd}")
    subprocess.check_call(cmd)
    for module_name in modules:
        try: module = importlib.import_module(module_name)
        except ModuleNotFoundError:
            cmd = ["python", "-m", "pip", "install", module_name]
            print(f"Module {module_name} not found. Installing with {cmd}")
            subprocess.check_call(cmd)
    exit(1)
try:
    import os, ctypes, json, base64, re, sys, pyuac
    import tkinter as tk
    from tkinter import *
    from PIL import Image, ImageTk
    from io import BytesIO
    from tkinter import messagebox
except ImportError as err:
    install_pip(["pyuac","pypiwin32","altgraph==0.17.4","auto-py-to-exe==2.42.0","bottle==0.12.25","bottle-websocket==0.2.9","cachetools==5.3.2","certifi==2023.7.22","cffi==1.16.0","charset-normalizer==3.3.2","Eel==0.16.0","future==0.18.3","gevent==23.9.1","gevent-websocket==0.10.1","google-auth==2.23.4","google-auth-oauthlib==1.1.0","greenlet==3.0.1","gspread==5.12.0","httplib2==0.22.0","idna==3.4","oauth2client==4.1.3","oauthlib==3.2.2","packaging==23.2","pefile==2023.2.7","Pillow==10.1.0","pyasn1==0.5.0","pyasn1-modules==0.3.0","pycparser==2.21","pyinstaller==6.2.0","pyinstaller-hooks-contrib==2023.10","pyparsing==3.1.1","pywin32-ctypes==0.2.2","requests==2.31.0","requests-oauthlib==1.3.1","rsa==4.9","setuptools==68.2.2","six==1.16.0","urllib3==2.1.0","whichcraft==0.6.1","zope.event==5.0","zope.interface==6.1"])

# region admin_check
def ask_restart_as_admin():
   root = tk.Tk()
   root.withdraw() # Hide the main window
   answer = messagebox.askyesno(title='Confirmation',
                    message='Do you want to restart the script as an admin?')
   return answer
# endregion admin_check

def is_hosts_updated():
    try:
        hosts_path = r"C:\Windows\System32\drivers\etc\hosts"
        print(f"Hosts file Expected at {hosts_path}")
        hosts_content = "\n#Star Citizen EAC workaround\n127.0.0.1        modules-cdn.eac-prod.on.epicgames.com"

        with open(hosts_path, 'r') as hosts_file:
            existing_content = hosts_file.read()

        # Check if the lines are already present
        return hosts_content not in existing_content

    except FileNotFoundError:
        return False  # Indicate failure: File not found

    except Exception as e:
        return False  # Indicate failure: An error occurred


def update_settings(directory, new_values):
    try:
        file_path = os.path.join(directory, 'settings.json')
        print(f"Settings file Expected at {file_path}")

        # Check if the directory exists
        if not os.path.exists(directory):
            return f"Directory not found: {directory}"

        # Load the JSON file
        with open(file_path, 'r') as file:
            settings = json.load(file)

        # Update the specific lines
        settings["productid"] = new_values["productid"]
        settings["sandboxid"] = new_values["sandboxid"]
        settings["clientid"] = new_values["clientid"]
        settings["deploymentid"] = new_values["deploymentid"]

        # Save the updated JSON back to the file
        with open(file_path, 'w') as file:
            json.dump(settings, file, indent=4)

        return f"Settings updated successfully in {file_path}"

    except FileNotFoundError:
        return f"File not found: {file_path}"

    except IsADirectoryError:
        return f"Error: {directory} is a directory, not a file."

    except Exception as e:
        return f"An error occurred while updating {file_path}: {str(e)}"


def update_attributes(directory, width, height, fov):
    file_path = os.path.join(directory, 'attributes.xml')
    print(f"Attributes file Expected at {file_path}")

    try:
        # Check if the directory exists
        if not os.path.exists(directory):
            return f"Directory not found: {directory}"

        with open(file_path, 'r') as file:
            data = file.read()

        # Update the specific lines
        data = re.sub(r'<Attr name="FOV" value="\d+\.?\d*"/>', f'<Attr name="FOV" value="{fov:.2f}"/>', data)
        data = re.sub(r'<Attr name="Height" value="\d+"/>', f'<Attr name="Height" value="{height}"/>', data)
        data = re.sub(r'<Attr name="Width" value="\d+"/>', f'<Attr name="Width" value="{width}"/>', data)

        # Write the updated data back to the file
        with open(file_path, 'w') as file:
            file.write(data)

        return f"Attributes successfully updated in {file_path}"

    except IsADirectoryError:
        return f"Error: {directory} is a directory, not a file."

    except Exception as e:
        return f"An error occurred while updating {file_path}: {str(e)}"


def update_data():
    drive_letter = drive_var.get()
    print(f"Drive Letter {drive_letter}")

    # Get the selected headset, resolution, width, and height
    selected_headset = headset_var.get()
    selected_resolution = resolution_var.get()
    
    
    # Check if the resolution is in the correct format
    resolution_match = re.findall(r'(\d+) X (\d+)', selected_resolution)
    if resolution_match:
        width, height = map(int, resolution_match[0])
    else:
        # Handle the case where the resolution format is incorrect
        messagebox.showerror("Error", "Invalid resolution format")
        return

    # Update settings in specified directories
    ptu_directory = os.path.join(drive_letter, 'Program Files', 'Roberts Space Industries', 'StarCitizen', 'PTU', 'EasyAntiCheat')
    print(f"EasyAntiCheat ptu_directory expected at {ptu_directory}")
    live_directory = os.path.join(drive_letter, 'Program Files', 'Roberts Space Industries', 'StarCitizen', 'LIVE', 'EasyAntiCheat')
    print(f"EasyAntiCheat live_directory expected at {live_directory}")
    eptu_directory = os.path.join(drive_letter, 'Program Files', 'Roberts Space Industries', 'StarCitizen', 'EPTU', 'EasyAntiCheat')
    print(f"EasyAntiCheat eptu_directory expected at {eptu_directory}")
    tech_preview = os.path.join(drive_letter, 'Program Files', 'Roberts Space Industries', 'StarCitizen', 'TECH-PREVIEW', 'EasyAntiCheat')
    print(f"EasyAntiCheat tech_preview expected at {tech_preview}")

    new_values = {
        "productid": "vorpx-eac-workaround",
        "sandboxid": "vorpx-eac-workaround",
        "clientid": "vorpx-eac-workaround",
        "deploymentid": "vorpx-eac-workaround",
    }

    # Update settings and capture the messages
    result_settings = [
        update_settings(ptu_directory, new_values),
        update_settings(live_directory, new_values),
        update_settings(eptu_directory, new_values),
        update_settings(tech_preview, new_values),
    ]

    result_settings_message = '\n'.join(result for result in result_settings if not result.startswith("Directory not found"))

    # Update attributes.xml
    selected_drive = drive_var.get()
    ptu_attributes_directory = os.path.join(selected_drive, 'Program Files', 'Roberts Space Industries', 'StarCitizen', 'PTU', 'USER', 'Client', '0', 'Profiles', 'default')
    print(f"ptu_attributes_directory expected at {ptu_directory}")
    live_attributes_directory = os.path.join(selected_drive, 'Program Files', 'Roberts Space Industries', 'StarCitizen', 'LIVE', 'USER', 'Client', '0', 'Profiles', 'default')
    print(f"live_attributes_directory expected at {live_attributes_directory}")
    eptu_attributes_directory = os.path.join(selected_drive, 'Program Files', 'Roberts Space Industries', 'StarCitizen', 'EPTU', 'USER', 'Client', '0', 'Profiles', 'default')
    print(f"eptu_attributes_directory expected at {eptu_attributes_directory}")
    tech_preview_attributes_directory = os.path.join(selected_drive, 'Program Files', 'Roberts Space Industries', 'StarCitizen', 'TECH-PREVIEW', 'USER', 'Client', '0', 'Profiles', 'default')
    print(f"tech_preview_attributes_directory expected at {tech_preview_attributes_directory}")

    # Fetch FOV and clamp it to a maximum of 120
    fov_value = min(fov_var.get(), 120)
    
    # Update attributes and capture the messages
    result_attributes = [
        update_attributes(live_attributes_directory, width, height, fov_value),
        update_attributes(ptu_attributes_directory, width, height, fov_value),
        update_attributes(eptu_attributes_directory, width, height, fov_value),
        update_attributes(tech_preview_attributes_directory, width, height, fov_value)
    ]

    result_attributes_message = '\n'.join(result for result in result_attributes if not result.startswith("Directory not found"))

    # Check and update hosts file
    hosts_updated = is_hosts_updated()

    # Check if any settings were successfully updated
    updated = any(result for result in result_settings)

    result_message = f"{result_settings_message}\n\n{result_attributes_message}"


    if hosts_updated:
        result_message += "\nHosts file updated successfully."
        updated = True
    elif hosts_updated is False:
        result_message += "\nHosts file is already up to date."
    print(result_message)
    messagebox.showinfo("Update Result", result_message)

    if updated:
        # Create a Close Program button
        close_button = tk.Button(root, text="Close Program", command=root.destroy, font=("Arial", 12))
        close_button.pack(pady=10)


if not pyuac.isUserAdmin():
    if ask_restart_as_admin():
        print("Re-launching as admin!")
        pyuac.runAsAdmin()
        exit(0)

# GUI setup
root = tk.Tk()
root.title("VRCitizen Settings Updater")
root.configure(bg="green")

# GUI Image
base64_image = '''

'''
image = Image.open(BytesIO(base64.b64decode(base64_image)))
image = ImageTk.PhotoImage(image)
label_image = Label(root, image=image, justify="center", anchor="n")
label_image.pack(padx=10, pady=10, anchor="n")

# Additional text label
additional_text = "Very Special thanks to RifleJock for getting all the VR Headset data in one place and for the suggestions and for being an idea soundboard. Special thanks to SilvanVR at CIG and Chachi Sanchez for getting VRCitizen going. Find them both on YouTube and Twitch. See you in the 'VRse  o7 "
label_text = Label(root, text=additional_text, font=("Arial", 12), wraplength=400, justify="center", anchor="n")
label_text.pack(padx=10, pady=10, anchor="n")

# Get the list of available drives
import string
drives = [f"{letter}:" for letter in string.ascii_uppercase if os.path.exists(f"{letter}:\\")]

# Label for drive selection
drive_label = tk.Label(root, text="Select the drive in dropdown below, where Star Citizen is installed.", anchor="c", font=("Arial", 12))
drive_label.pack(padx=10, pady=10, anchor="c")

# Dropdown for drive selection
drive_var = tk.StringVar()
drive_dropdown = tk.OptionMenu(root, drive_var, *drives)
drive_dropdown.pack(padx=10, pady=10, anchor="c")

# Load headset data from the JSON file
with open('Headset_Configurations_v4.json', 'r') as json_file:
    headset_data = json.load(json_file)

# Set default headset
default_headset = "HP Reverb G2"

# Label for headset selection
headset_label = tk.Label(root, text="Select VR Headset in the dropdown below \n(for PIMAX also choose lenses installed):", anchor="c", font=("Arial", 12))
headset_label.pack(padx=10, pady=10, anchor="c")

# Dropdown for headset selection
headset_var = tk.StringVar()
headsets = list(headset_data.keys())  # Updated to get the list of headsets dynamically
headset_var.set(default_headset)
headset_dropdown = tk.OptionMenu(root, headset_var, *headsets)
headset_dropdown.pack(padx=10, pady=10, anchor="c")

# Label for resolution selection
resolution_label = tk.Label(root, text="Select Resolution in dropdown below and then hit UPDATE:", anchor="c", font=("Arial", 12))
resolution_label.pack(padx=10, pady=10, anchor="c")

# Dropdown for resolution selection
resolution_var = tk.StringVar()
resolution_menu = tk.OptionMenu(root, resolution_var, "No Resolutions")
resolution_menu.config(font=("Arial", 12))
resolution_menu.pack(padx=10, pady=10, anchor="c")

# Update FOV and resolutions based on the selected headset
def update_headset_data(fov_var, *args):
    selected_headset = headset_var.get()
    if selected_headset:
        # Fetch FOV and clamp it to a maximum of 120
        fov_value = min(headset_data[selected_headset].get("SC Attributes FOV", 0), 120)
        fov_var.set(fov_value)

        # Fetch resolutions and update the dropdown
        custom_resolutions = headset_data[selected_headset].get("Custom Resolution List", [])
        resolution_menu['menu'].delete(0, 'end')  # Clear the existing menu

        for resolution in custom_resolutions:
            resolution_menu['menu'].add_command(label=resolution, command=tk._setit(resolution_var, resolution))

        if custom_resolutions:
            resolution_var.set(custom_resolutions[0])
        else:
            resolution_var.set("No Resolutions")

# Bind the update function to the headset dropdown
headset_var.trace_add("write", lambda *args: update_headset_data(fov_var, *args))
fov_var = tk.DoubleVar()

# Button to update settings
update_button = tk.Button(root, text="UPDATE", command=update_data, font=("Arial", 14), bg="blue", fg="white")
update_button.pack(padx=10, pady=10, anchor="c")

# Run the Tkinter event loop
root.mainloop()
